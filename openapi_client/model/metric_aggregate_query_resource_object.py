# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.  # noqa: E501

    The version of the OpenAPI document: 2023-09-15
    Contact: developers@klaviyo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MetricAggregateQueryResourceObject(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "attributes",
            "type",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['MetricAggregateEnum']:
                return MetricAggregateEnum
            
            
            class attributes(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "filter",
                        "metric_id",
                        "measurements",
                    }
                    
                    class properties:
                        
                        
                        class metric_id(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'metric_id':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class page_cursor(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'page_cursor':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class measurements(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "count": "COUNT",
                                            "sum_value": "SUM_VALUE",
                                            "unique": "UNIQUE",
                                        }
                                    
                                    @schemas.classproperty
                                    def COUNT(cls):
                                        return cls("count")
                                    
                                    @schemas.classproperty
                                    def SUM_VALUE(cls):
                                        return cls("sum_value")
                                    
                                    @schemas.classproperty
                                    def UNIQUE(cls):
                                        return cls("unique")
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'measurements':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class interval(
                            schemas.EnumBase,
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "day": "DAY",
                                    "hour": "HOUR",
                                    "month": "MONTH",
                                    "week": "WEEK",
                                }
                            
                            @schemas.classproperty
                            def DAY(cls):
                                return cls("day")
                            
                            @schemas.classproperty
                            def HOUR(cls):
                                return cls("hour")
                            
                            @schemas.classproperty
                            def MONTH(cls):
                                return cls("month")
                            
                            @schemas.classproperty
                            def WEEK(cls):
                                return cls("week")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'interval':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        page_size = schemas.IntSchema
                        
                        
                        class by(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "$attributed_channel": "ATTRIBUTED_CHANNEL",
                                            "$attributed_flow": "ATTRIBUTED_FLOW",
                                            "$attributed_message": "ATTRIBUTED_MESSAGE",
                                            "$attributed_variation": "ATTRIBUTED_VARIATION",
                                            "$campaign_channel": "CAMPAIGN_CHANNEL",
                                            "$flow": "FLOW",
                                            "$flow_channel": "FLOW_CHANNEL",
                                            "$message": "MESSAGE",
                                            "$message_send_cohort": "MESSAGE_SEND_COHORT",
                                            "$variation": "VARIATION",
                                            "$variation_send_cohort": "VARIATION_SEND_COHORT",
                                            "Bounce Type": "BOUNCE_TYPE",
                                            "Campaign Name": "CAMPAIGN_NAME",
                                            "Client Canonical": "CLIENT_CANONICAL",
                                            "Client Name": "CLIENT_NAME",
                                            "Client Type": "CLIENT_TYPE",
                                            "Email Domain": "EMAIL_DOMAIN",
                                            "Failure Source": "FAILURE_SOURCE",
                                            "Failure Type": "FAILURE_TYPE",
                                            "From Number": "FROM_NUMBER",
                                            "From Phone Region": "FROM_PHONE_REGION",
                                            "List": "LIST",
                                            "Message Name": "MESSAGE_NAME",
                                            "Message Type": "MESSAGE_TYPE",
                                            "Method": "METHOD",
                                            "Subject": "SUBJECT",
                                            "To Number": "TO_NUMBER",
                                            "To Phone Region": "TO_PHONE_REGION",
                                            "URL": "URL",
                                            "form_id": "FORM_ID",
                                        }
                                    
                                    @schemas.classproperty
                                    def ATTRIBUTED_CHANNEL(cls):
                                        return cls("$attributed_channel")
                                    
                                    @schemas.classproperty
                                    def ATTRIBUTED_FLOW(cls):
                                        return cls("$attributed_flow")
                                    
                                    @schemas.classproperty
                                    def ATTRIBUTED_MESSAGE(cls):
                                        return cls("$attributed_message")
                                    
                                    @schemas.classproperty
                                    def ATTRIBUTED_VARIATION(cls):
                                        return cls("$attributed_variation")
                                    
                                    @schemas.classproperty
                                    def CAMPAIGN_CHANNEL(cls):
                                        return cls("$campaign_channel")
                                    
                                    @schemas.classproperty
                                    def FLOW(cls):
                                        return cls("$flow")
                                    
                                    @schemas.classproperty
                                    def FLOW_CHANNEL(cls):
                                        return cls("$flow_channel")
                                    
                                    @schemas.classproperty
                                    def MESSAGE(cls):
                                        return cls("$message")
                                    
                                    @schemas.classproperty
                                    def MESSAGE_SEND_COHORT(cls):
                                        return cls("$message_send_cohort")
                                    
                                    @schemas.classproperty
                                    def VARIATION(cls):
                                        return cls("$variation")
                                    
                                    @schemas.classproperty
                                    def VARIATION_SEND_COHORT(cls):
                                        return cls("$variation_send_cohort")
                                    
                                    @schemas.classproperty
                                    def BOUNCE_TYPE(cls):
                                        return cls("Bounce Type")
                                    
                                    @schemas.classproperty
                                    def CAMPAIGN_NAME(cls):
                                        return cls("Campaign Name")
                                    
                                    @schemas.classproperty
                                    def CLIENT_CANONICAL(cls):
                                        return cls("Client Canonical")
                                    
                                    @schemas.classproperty
                                    def CLIENT_NAME(cls):
                                        return cls("Client Name")
                                    
                                    @schemas.classproperty
                                    def CLIENT_TYPE(cls):
                                        return cls("Client Type")
                                    
                                    @schemas.classproperty
                                    def EMAIL_DOMAIN(cls):
                                        return cls("Email Domain")
                                    
                                    @schemas.classproperty
                                    def FAILURE_SOURCE(cls):
                                        return cls("Failure Source")
                                    
                                    @schemas.classproperty
                                    def FAILURE_TYPE(cls):
                                        return cls("Failure Type")
                                    
                                    @schemas.classproperty
                                    def FROM_NUMBER(cls):
                                        return cls("From Number")
                                    
                                    @schemas.classproperty
                                    def FROM_PHONE_REGION(cls):
                                        return cls("From Phone Region")
                                    
                                    @schemas.classproperty
                                    def LIST(cls):
                                        return cls("List")
                                    
                                    @schemas.classproperty
                                    def MESSAGE_NAME(cls):
                                        return cls("Message Name")
                                    
                                    @schemas.classproperty
                                    def MESSAGE_TYPE(cls):
                                        return cls("Message Type")
                                    
                                    @schemas.classproperty
                                    def METHOD(cls):
                                        return cls("Method")
                                    
                                    @schemas.classproperty
                                    def SUBJECT(cls):
                                        return cls("Subject")
                                    
                                    @schemas.classproperty
                                    def TO_NUMBER(cls):
                                        return cls("To Number")
                                    
                                    @schemas.classproperty
                                    def TO_PHONE_REGION(cls):
                                        return cls("To Phone Region")
                                    
                                    @schemas.classproperty
                                    def URL(cls):
                                        return cls("URL")
                                    
                                    @schemas.classproperty
                                    def FORM_ID(cls):
                                        return cls("form_id")
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'by':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class return_fields(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'return_fields':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class filter(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'filter':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class timezone(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'timezone':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class sort(
                            schemas.EnumBase,
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "$attributed_channel": "ATTRIBUTED_CHANNEL",
                                    "-$attributed_channel": "ATTRIBUTED_CHANNEL",
                                    "$attributed_flow": "ATTRIBUTED_FLOW",
                                    "-$attributed_flow": "ATTRIBUTED_FLOW",
                                    "$attributed_message": "ATTRIBUTED_MESSAGE",
                                    "-$attributed_message": "ATTRIBUTED_MESSAGE",
                                    "$attributed_variation": "ATTRIBUTED_VARIATION",
                                    "-$attributed_variation": "ATTRIBUTED_VARIATION",
                                    "$campaign_channel": "CAMPAIGN_CHANNEL",
                                    "-$campaign_channel": "CAMPAIGN_CHANNEL",
                                    "$flow": "FLOW",
                                    "-$flow": "FLOW",
                                    "$flow_channel": "FLOW_CHANNEL",
                                    "-$flow_channel": "FLOW_CHANNEL",
                                    "$message": "MESSAGE",
                                    "-$message": "MESSAGE",
                                    "$message_send_cohort": "MESSAGE_SEND_COHORT",
                                    "-$message_send_cohort": "MESSAGE_SEND_COHORT",
                                    "$variation": "VARIATION",
                                    "-$variation": "VARIATION",
                                    "$variation_send_cohort": "VARIATION_SEND_COHORT",
                                    "-$variation_send_cohort": "VARIATION_SEND_COHORT",
                                    "Bounce Type": "BOUNCE_TYPE",
                                    "-Bounce Type": "BOUNCE_TYPE",
                                    "Campaign Name": "CAMPAIGN_NAME",
                                    "-Campaign Name": "CAMPAIGN_NAME",
                                    "Client Canonical": "CLIENT_CANONICAL",
                                    "-Client Canonical": "CLIENT_CANONICAL",
                                    "Client Name": "CLIENT_NAME",
                                    "-Client Name": "CLIENT_NAME",
                                    "Client Type": "CLIENT_TYPE",
                                    "-Client Type": "CLIENT_TYPE",
                                    "Email Domain": "EMAIL_DOMAIN",
                                    "-Email Domain": "EMAIL_DOMAIN",
                                    "Failure Source": "FAILURE_SOURCE",
                                    "-Failure Source": "FAILURE_SOURCE",
                                    "Failure Type": "FAILURE_TYPE",
                                    "-Failure Type": "FAILURE_TYPE",
                                    "From Number": "FROM_NUMBER",
                                    "-From Number": "FROM_NUMBER",
                                    "From Phone Region": "FROM_PHONE_REGION",
                                    "-From Phone Region": "FROM_PHONE_REGION",
                                    "List": "LIST",
                                    "-List": "LIST",
                                    "Message Name": "MESSAGE_NAME",
                                    "-Message Name": "MESSAGE_NAME",
                                    "Message Type": "MESSAGE_TYPE",
                                    "-Message Type": "MESSAGE_TYPE",
                                    "Method": "METHOD",
                                    "-Method": "METHOD",
                                    "Subject": "SUBJECT",
                                    "-Subject": "SUBJECT",
                                    "To Number": "TO_NUMBER",
                                    "-To Number": "TO_NUMBER",
                                    "To Phone Region": "TO_PHONE_REGION",
                                    "-To Phone Region": "TO_PHONE_REGION",
                                    "URL": "URL",
                                    "-URL": "URL",
                                    "count": "COUNT",
                                    "-count": "COUNT",
                                    "form_id": "FORM_ID",
                                    "-form_id": "FORM_ID",
                                    "sum_value": "SUM_VALUE",
                                    "-sum_value": "SUM_VALUE",
                                    "unique": "UNIQUE",
                                    "-unique": "UNIQUE",
                                }
                            
                            @schemas.classproperty
                            def ATTRIBUTED_CHANNEL(cls):
                                return cls("$attributed_channel")
                            
                            @schemas.classproperty
                            def ATTRIBUTED_CHANNEL(cls):
                                return cls("-$attributed_channel")
                            
                            @schemas.classproperty
                            def ATTRIBUTED_FLOW(cls):
                                return cls("$attributed_flow")
                            
                            @schemas.classproperty
                            def ATTRIBUTED_FLOW(cls):
                                return cls("-$attributed_flow")
                            
                            @schemas.classproperty
                            def ATTRIBUTED_MESSAGE(cls):
                                return cls("$attributed_message")
                            
                            @schemas.classproperty
                            def ATTRIBUTED_MESSAGE(cls):
                                return cls("-$attributed_message")
                            
                            @schemas.classproperty
                            def ATTRIBUTED_VARIATION(cls):
                                return cls("$attributed_variation")
                            
                            @schemas.classproperty
                            def ATTRIBUTED_VARIATION(cls):
                                return cls("-$attributed_variation")
                            
                            @schemas.classproperty
                            def CAMPAIGN_CHANNEL(cls):
                                return cls("$campaign_channel")
                            
                            @schemas.classproperty
                            def CAMPAIGN_CHANNEL(cls):
                                return cls("-$campaign_channel")
                            
                            @schemas.classproperty
                            def FLOW(cls):
                                return cls("$flow")
                            
                            @schemas.classproperty
                            def FLOW(cls):
                                return cls("-$flow")
                            
                            @schemas.classproperty
                            def FLOW_CHANNEL(cls):
                                return cls("$flow_channel")
                            
                            @schemas.classproperty
                            def FLOW_CHANNEL(cls):
                                return cls("-$flow_channel")
                            
                            @schemas.classproperty
                            def MESSAGE(cls):
                                return cls("$message")
                            
                            @schemas.classproperty
                            def MESSAGE(cls):
                                return cls("-$message")
                            
                            @schemas.classproperty
                            def MESSAGE_SEND_COHORT(cls):
                                return cls("$message_send_cohort")
                            
                            @schemas.classproperty
                            def MESSAGE_SEND_COHORT(cls):
                                return cls("-$message_send_cohort")
                            
                            @schemas.classproperty
                            def VARIATION(cls):
                                return cls("$variation")
                            
                            @schemas.classproperty
                            def VARIATION(cls):
                                return cls("-$variation")
                            
                            @schemas.classproperty
                            def VARIATION_SEND_COHORT(cls):
                                return cls("$variation_send_cohort")
                            
                            @schemas.classproperty
                            def VARIATION_SEND_COHORT(cls):
                                return cls("-$variation_send_cohort")
                            
                            @schemas.classproperty
                            def BOUNCE_TYPE(cls):
                                return cls("Bounce Type")
                            
                            @schemas.classproperty
                            def BOUNCE_TYPE(cls):
                                return cls("-Bounce Type")
                            
                            @schemas.classproperty
                            def CAMPAIGN_NAME(cls):
                                return cls("Campaign Name")
                            
                            @schemas.classproperty
                            def CAMPAIGN_NAME(cls):
                                return cls("-Campaign Name")
                            
                            @schemas.classproperty
                            def CLIENT_CANONICAL(cls):
                                return cls("Client Canonical")
                            
                            @schemas.classproperty
                            def CLIENT_CANONICAL(cls):
                                return cls("-Client Canonical")
                            
                            @schemas.classproperty
                            def CLIENT_NAME(cls):
                                return cls("Client Name")
                            
                            @schemas.classproperty
                            def CLIENT_NAME(cls):
                                return cls("-Client Name")
                            
                            @schemas.classproperty
                            def CLIENT_TYPE(cls):
                                return cls("Client Type")
                            
                            @schemas.classproperty
                            def CLIENT_TYPE(cls):
                                return cls("-Client Type")
                            
                            @schemas.classproperty
                            def EMAIL_DOMAIN(cls):
                                return cls("Email Domain")
                            
                            @schemas.classproperty
                            def EMAIL_DOMAIN(cls):
                                return cls("-Email Domain")
                            
                            @schemas.classproperty
                            def FAILURE_SOURCE(cls):
                                return cls("Failure Source")
                            
                            @schemas.classproperty
                            def FAILURE_SOURCE(cls):
                                return cls("-Failure Source")
                            
                            @schemas.classproperty
                            def FAILURE_TYPE(cls):
                                return cls("Failure Type")
                            
                            @schemas.classproperty
                            def FAILURE_TYPE(cls):
                                return cls("-Failure Type")
                            
                            @schemas.classproperty
                            def FROM_NUMBER(cls):
                                return cls("From Number")
                            
                            @schemas.classproperty
                            def FROM_NUMBER(cls):
                                return cls("-From Number")
                            
                            @schemas.classproperty
                            def FROM_PHONE_REGION(cls):
                                return cls("From Phone Region")
                            
                            @schemas.classproperty
                            def FROM_PHONE_REGION(cls):
                                return cls("-From Phone Region")
                            
                            @schemas.classproperty
                            def LIST(cls):
                                return cls("List")
                            
                            @schemas.classproperty
                            def LIST(cls):
                                return cls("-List")
                            
                            @schemas.classproperty
                            def MESSAGE_NAME(cls):
                                return cls("Message Name")
                            
                            @schemas.classproperty
                            def MESSAGE_NAME(cls):
                                return cls("-Message Name")
                            
                            @schemas.classproperty
                            def MESSAGE_TYPE(cls):
                                return cls("Message Type")
                            
                            @schemas.classproperty
                            def MESSAGE_TYPE(cls):
                                return cls("-Message Type")
                            
                            @schemas.classproperty
                            def METHOD(cls):
                                return cls("Method")
                            
                            @schemas.classproperty
                            def METHOD(cls):
                                return cls("-Method")
                            
                            @schemas.classproperty
                            def SUBJECT(cls):
                                return cls("Subject")
                            
                            @schemas.classproperty
                            def SUBJECT(cls):
                                return cls("-Subject")
                            
                            @schemas.classproperty
                            def TO_NUMBER(cls):
                                return cls("To Number")
                            
                            @schemas.classproperty
                            def TO_NUMBER(cls):
                                return cls("-To Number")
                            
                            @schemas.classproperty
                            def TO_PHONE_REGION(cls):
                                return cls("To Phone Region")
                            
                            @schemas.classproperty
                            def TO_PHONE_REGION(cls):
                                return cls("-To Phone Region")
                            
                            @schemas.classproperty
                            def URL(cls):
                                return cls("URL")
                            
                            @schemas.classproperty
                            def URL(cls):
                                return cls("-URL")
                            
                            @schemas.classproperty
                            def COUNT(cls):
                                return cls("count")
                            
                            @schemas.classproperty
                            def COUNT(cls):
                                return cls("-count")
                            
                            @schemas.classproperty
                            def FORM_ID(cls):
                                return cls("form_id")
                            
                            @schemas.classproperty
                            def FORM_ID(cls):
                                return cls("-form_id")
                            
                            @schemas.classproperty
                            def SUM_VALUE(cls):
                                return cls("sum_value")
                            
                            @schemas.classproperty
                            def SUM_VALUE(cls):
                                return cls("-sum_value")
                            
                            @schemas.classproperty
                            def UNIQUE(cls):
                                return cls("unique")
                            
                            @schemas.classproperty
                            def UNIQUE(cls):
                                return cls("-unique")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'sort':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        __annotations__ = {
                            "metric_id": metric_id,
                            "page_cursor": page_cursor,
                            "measurements": measurements,
                            "interval": interval,
                            "page_size": page_size,
                            "by": by,
                            "return_fields": return_fields,
                            "filter": filter,
                            "timezone": timezone,
                            "sort": sort,
                        }
                
                filter: MetaOapg.properties.filter
                metric_id: MetaOapg.properties.metric_id
                measurements: MetaOapg.properties.measurements
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["metric_id"]) -> MetaOapg.properties.metric_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["page_cursor"]) -> MetaOapg.properties.page_cursor: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["measurements"]) -> MetaOapg.properties.measurements: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["page_size"]) -> MetaOapg.properties.page_size: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["by"]) -> MetaOapg.properties.by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["return_fields"]) -> MetaOapg.properties.return_fields: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["filter"]) -> MetaOapg.properties.filter: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["metric_id", "page_cursor", "measurements", "interval", "page_size", "by", "return_fields", "filter", "timezone", "sort", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["metric_id"]) -> MetaOapg.properties.metric_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["page_cursor"]) -> typing.Union[MetaOapg.properties.page_cursor, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["measurements"]) -> MetaOapg.properties.measurements: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["interval"]) -> typing.Union[MetaOapg.properties.interval, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["page_size"]) -> typing.Union[MetaOapg.properties.page_size, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["by"]) -> typing.Union[MetaOapg.properties.by, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["return_fields"]) -> typing.Union[MetaOapg.properties.return_fields, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> MetaOapg.properties.filter: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sort"]) -> typing.Union[MetaOapg.properties.sort, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metric_id", "page_cursor", "measurements", "interval", "page_size", "by", "return_fields", "filter", "timezone", "sort", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    filter: typing.Union[MetaOapg.properties.filter, list, tuple, ],
                    metric_id: typing.Union[MetaOapg.properties.metric_id, None, str, ],
                    measurements: typing.Union[MetaOapg.properties.measurements, list, tuple, ],
                    page_cursor: typing.Union[MetaOapg.properties.page_cursor, None, str, schemas.Unset] = schemas.unset,
                    interval: typing.Union[MetaOapg.properties.interval, None, str, schemas.Unset] = schemas.unset,
                    page_size: typing.Union[MetaOapg.properties.page_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    by: typing.Union[MetaOapg.properties.by, list, tuple, schemas.Unset] = schemas.unset,
                    return_fields: typing.Union[MetaOapg.properties.return_fields, list, tuple, schemas.Unset] = schemas.unset,
                    timezone: typing.Union[MetaOapg.properties.timezone, None, str, schemas.Unset] = schemas.unset,
                    sort: typing.Union[MetaOapg.properties.sort, None, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'attributes':
                    return super().__new__(
                        cls,
                        *_args,
                        filter=filter,
                        metric_id=metric_id,
                        measurements=measurements,
                        page_cursor=page_cursor,
                        interval=interval,
                        page_size=page_size,
                        by=by,
                        return_fields=return_fields,
                        timezone=timezone,
                        sort=sort,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "type": type,
                "attributes": attributes,
            }
    
    attributes: MetaOapg.properties.attributes
    type: 'MetricAggregateEnum'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'MetricAggregateEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "attributes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'MetricAggregateEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "attributes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, ],
        type: 'MetricAggregateEnum',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetricAggregateQueryResourceObject':
        return super().__new__(
            cls,
            *_args,
            attributes=attributes,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.metric_aggregate_enum import MetricAggregateEnum
