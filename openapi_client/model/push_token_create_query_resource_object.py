# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.  # noqa: E501

    The version of the OpenAPI document: 2023-09-15
    Contact: developers@klaviyo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PushTokenCreateQueryResourceObject(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "attributes",
            "type",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['PushTokenEnum']:
                return PushTokenEnum
            
            
            class attributes(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "vendor",
                        "profile",
                        "platform",
                        "token",
                    }
                    
                    class properties:
                        
                        
                        class token(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'token':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class platform(
                            schemas.EnumBase,
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "android": "ANDROID",
                                    "ios": "IOS",
                                }
                            
                            @schemas.classproperty
                            def ANDROID(cls):
                                return cls("android")
                            
                            @schemas.classproperty
                            def IOS(cls):
                                return cls("ios")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'platform':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class enablement_status(
                            schemas.EnumBase,
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "AUTHORIZED": "AUTHORIZED",
                                    "DENIED": "DENIED",
                                    "NOT_DETERMINED": "NOT_DETERMINED",
                                    "PROVISIONAL": "PROVISIONAL",
                                    "UNAUTHORIZED": "UNAUTHORIZED",
                                }
                            
                            @schemas.classproperty
                            def AUTHORIZED(cls):
                                return cls("AUTHORIZED")
                            
                            @schemas.classproperty
                            def DENIED(cls):
                                return cls("DENIED")
                            
                            @schemas.classproperty
                            def NOT_DETERMINED(cls):
                                return cls("NOT_DETERMINED")
                            
                            @schemas.classproperty
                            def PROVISIONAL(cls):
                                return cls("PROVISIONAL")
                            
                            @schemas.classproperty
                            def UNAUTHORIZED(cls):
                                return cls("UNAUTHORIZED")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'enablement_status':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class vendor(
                            schemas.EnumBase,
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "apns": "APNS",
                                    "fcm": "FCM",
                                }
                            
                            @schemas.classproperty
                            def APNS(cls):
                                return cls("apns")
                            
                            @schemas.classproperty
                            def FCM(cls):
                                return cls("fcm")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'vendor':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class background(
                            schemas.EnumBase,
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "AVAILABLE": "AVAILABLE",
                                    "DENIED": "DENIED",
                                    "RESTRICTED": "RESTRICTED",
                                }
                            
                            @schemas.classproperty
                            def AVAILABLE(cls):
                                return cls("AVAILABLE")
                            
                            @schemas.classproperty
                            def DENIED(cls):
                                return cls("DENIED")
                            
                            @schemas.classproperty
                            def RESTRICTED(cls):
                                return cls("RESTRICTED")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'background':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                    
                        @staticmethod
                        def device_metadata() -> typing.Type['DeviceMetadata']:
                            return DeviceMetadata
                        
                        
                        class profile(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "data",
                                }
                                
                                class properties:
                                
                                    @staticmethod
                                    def data() -> typing.Type['ProfileUpsertQueryResourceObject']:
                                        return ProfileUpsertQueryResourceObject
                                    __annotations__ = {
                                        "data": data,
                                    }
                            
                            data: 'ProfileUpsertQueryResourceObject'
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'ProfileUpsertQueryResourceObject': ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> 'ProfileUpsertQueryResourceObject': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                data: 'ProfileUpsertQueryResourceObject',
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'profile':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    data=data,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "token": token,
                            "platform": platform,
                            "enablement_status": enablement_status,
                            "vendor": vendor,
                            "background": background,
                            "device_metadata": device_metadata,
                            "profile": profile,
                        }
                
                vendor: MetaOapg.properties.vendor
                profile: MetaOapg.properties.profile
                platform: MetaOapg.properties.platform
                token: MetaOapg.properties.token
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["enablement_status"]) -> MetaOapg.properties.enablement_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["background"]) -> MetaOapg.properties.background: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["device_metadata"]) -> 'DeviceMetadata': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["profile"]) -> MetaOapg.properties.profile: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["token", "platform", "enablement_status", "vendor", "background", "device_metadata", "profile", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["enablement_status"]) -> typing.Union[MetaOapg.properties.enablement_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["background"]) -> typing.Union[MetaOapg.properties.background, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["device_metadata"]) -> typing.Union['DeviceMetadata', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> MetaOapg.properties.profile: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["token", "platform", "enablement_status", "vendor", "background", "device_metadata", "profile", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    vendor: typing.Union[MetaOapg.properties.vendor, None, str, ],
                    profile: typing.Union[MetaOapg.properties.profile, dict, frozendict.frozendict, ],
                    platform: typing.Union[MetaOapg.properties.platform, None, str, ],
                    token: typing.Union[MetaOapg.properties.token, None, str, ],
                    enablement_status: typing.Union[MetaOapg.properties.enablement_status, None, str, schemas.Unset] = schemas.unset,
                    background: typing.Union[MetaOapg.properties.background, None, str, schemas.Unset] = schemas.unset,
                    device_metadata: typing.Union['DeviceMetadata', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'attributes':
                    return super().__new__(
                        cls,
                        *_args,
                        vendor=vendor,
                        profile=profile,
                        platform=platform,
                        token=token,
                        enablement_status=enablement_status,
                        background=background,
                        device_metadata=device_metadata,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "type": type,
                "attributes": attributes,
            }
    
    attributes: MetaOapg.properties.attributes
    type: 'PushTokenEnum'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'PushTokenEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "attributes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'PushTokenEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "attributes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, ],
        type: 'PushTokenEnum',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PushTokenCreateQueryResourceObject':
        return super().__new__(
            cls,
            *_args,
            attributes=attributes,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.device_metadata import DeviceMetadata
from openapi_client.model.profile_upsert_query_resource_object import ProfileUpsertQueryResourceObject
from openapi_client.model.push_token_enum import PushTokenEnum
