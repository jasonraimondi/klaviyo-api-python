# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.  # noqa: E501

    The version of the OpenAPI document: 2023-09-15
    Contact: developers@klaviyo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SendStrategySubObject(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "method",
        }
        
        class properties:
            method = schemas.StrSchema
        
            @staticmethod
            def options_static() -> typing.Type['StaticScheduleOptions']:
                return StaticScheduleOptions
        
            @staticmethod
            def options_throttled() -> typing.Type['ThrottledScheduleOptions']:
                return ThrottledScheduleOptions
        
            @staticmethod
            def options_sto() -> typing.Type['STOScheduleOptions']:
                return STOScheduleOptions
            __annotations__ = {
                "method": method,
                "options_static": options_static,
                "options_throttled": options_throttled,
                "options_sto": options_sto,
            }
    
    method: MetaOapg.properties.method
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options_static"]) -> 'StaticScheduleOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options_throttled"]) -> 'ThrottledScheduleOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options_sto"]) -> 'STOScheduleOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["method", "options_static", "options_throttled", "options_sto", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options_static"]) -> typing.Union['StaticScheduleOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options_throttled"]) -> typing.Union['ThrottledScheduleOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options_sto"]) -> typing.Union['STOScheduleOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["method", "options_static", "options_throttled", "options_sto", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        method: typing.Union[MetaOapg.properties.method, str, ],
        options_static: typing.Union['StaticScheduleOptions', schemas.Unset] = schemas.unset,
        options_throttled: typing.Union['ThrottledScheduleOptions', schemas.Unset] = schemas.unset,
        options_sto: typing.Union['STOScheduleOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SendStrategySubObject':
        return super().__new__(
            cls,
            *_args,
            method=method,
            options_static=options_static,
            options_throttled=options_throttled,
            options_sto=options_sto,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.static_schedule_options import StaticScheduleOptions
from openapi_client.model.sto_schedule_options import STOScheduleOptions
from openapi_client.model.throttled_schedule_options import ThrottledScheduleOptions
