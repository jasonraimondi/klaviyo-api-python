# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.  # noqa: E501

    The version of the OpenAPI document: 2023-09-15
    Contact: developers@klaviyo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class DeviceMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            device_id = schemas.StrSchema
            
            
            class klaviyo_sdk(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "android": "ANDROID",
                        "swift": "SWIFT",
                    }
                
                @schemas.classproperty
                def ANDROID(cls):
                    return cls("android")
                
                @schemas.classproperty
                def SWIFT(cls):
                    return cls("swift")
            sdk_version = schemas.StrSchema
            device_model = schemas.StrSchema
            
            
            class os_name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "android": "ANDROID",
                        "ios": "IOS",
                        "ipados": "IPADOS",
                        "macos": "MACOS",
                        "tvos": "TVOS",
                    }
                
                @schemas.classproperty
                def ANDROID(cls):
                    return cls("android")
                
                @schemas.classproperty
                def IOS(cls):
                    return cls("ios")
                
                @schemas.classproperty
                def IPADOS(cls):
                    return cls("ipados")
                
                @schemas.classproperty
                def MACOS(cls):
                    return cls("macos")
                
                @schemas.classproperty
                def TVOS(cls):
                    return cls("tvos")
            os_version = schemas.StrSchema
            manufacturer = schemas.StrSchema
            app_name = schemas.StrSchema
            app_version = schemas.StrSchema
            app_build = schemas.StrSchema
            app_id = schemas.StrSchema
            
            
            class environment(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "debug": "DEBUG",
                        "release": "RELEASE",
                    }
                
                @schemas.classproperty
                def DEBUG(cls):
                    return cls("debug")
                
                @schemas.classproperty
                def RELEASE(cls):
                    return cls("release")
            __annotations__ = {
                "device_id": device_id,
                "klaviyo_sdk": klaviyo_sdk,
                "sdk_version": sdk_version,
                "device_model": device_model,
                "os_name": os_name,
                "os_version": os_version,
                "manufacturer": manufacturer,
                "app_name": app_name,
                "app_version": app_version,
                "app_build": app_build,
                "app_id": app_id,
                "environment": environment,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["klaviyo_sdk"]) -> MetaOapg.properties.klaviyo_sdk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sdk_version"]) -> MetaOapg.properties.sdk_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_model"]) -> MetaOapg.properties.device_model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["os_name"]) -> MetaOapg.properties.os_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["os_version"]) -> MetaOapg.properties.os_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manufacturer"]) -> MetaOapg.properties.manufacturer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_name"]) -> MetaOapg.properties.app_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_version"]) -> MetaOapg.properties.app_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_build"]) -> MetaOapg.properties.app_build: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_id"]) -> MetaOapg.properties.app_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["device_id", "klaviyo_sdk", "sdk_version", "device_model", "os_name", "os_version", "manufacturer", "app_name", "app_version", "app_build", "app_id", "environment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["klaviyo_sdk"]) -> typing.Union[MetaOapg.properties.klaviyo_sdk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sdk_version"]) -> typing.Union[MetaOapg.properties.sdk_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_model"]) -> typing.Union[MetaOapg.properties.device_model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["os_name"]) -> typing.Union[MetaOapg.properties.os_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["os_version"]) -> typing.Union[MetaOapg.properties.os_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manufacturer"]) -> typing.Union[MetaOapg.properties.manufacturer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_name"]) -> typing.Union[MetaOapg.properties.app_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_version"]) -> typing.Union[MetaOapg.properties.app_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_build"]) -> typing.Union[MetaOapg.properties.app_build, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_id"]) -> typing.Union[MetaOapg.properties.app_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> typing.Union[MetaOapg.properties.environment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device_id", "klaviyo_sdk", "sdk_version", "device_model", "os_name", "os_version", "manufacturer", "app_name", "app_version", "app_build", "app_id", "environment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        device_id: typing.Union[MetaOapg.properties.device_id, str, schemas.Unset] = schemas.unset,
        klaviyo_sdk: typing.Union[MetaOapg.properties.klaviyo_sdk, str, schemas.Unset] = schemas.unset,
        sdk_version: typing.Union[MetaOapg.properties.sdk_version, str, schemas.Unset] = schemas.unset,
        device_model: typing.Union[MetaOapg.properties.device_model, str, schemas.Unset] = schemas.unset,
        os_name: typing.Union[MetaOapg.properties.os_name, str, schemas.Unset] = schemas.unset,
        os_version: typing.Union[MetaOapg.properties.os_version, str, schemas.Unset] = schemas.unset,
        manufacturer: typing.Union[MetaOapg.properties.manufacturer, str, schemas.Unset] = schemas.unset,
        app_name: typing.Union[MetaOapg.properties.app_name, str, schemas.Unset] = schemas.unset,
        app_version: typing.Union[MetaOapg.properties.app_version, str, schemas.Unset] = schemas.unset,
        app_build: typing.Union[MetaOapg.properties.app_build, str, schemas.Unset] = schemas.unset,
        app_id: typing.Union[MetaOapg.properties.app_id, str, schemas.Unset] = schemas.unset,
        environment: typing.Union[MetaOapg.properties.environment, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeviceMetadata':
        return super().__new__(
            cls,
            *_args,
            device_id=device_id,
            klaviyo_sdk=klaviyo_sdk,
            sdk_version=sdk_version,
            device_model=device_model,
            os_name=os_name,
            os_version=os_version,
            manufacturer=manufacturer,
            app_name=app_name,
            app_version=app_version,
            app_build=app_build,
            app_id=app_id,
            environment=environment,
            _configuration=_configuration,
            **kwargs,
        )
