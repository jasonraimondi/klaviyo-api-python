# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.  # noqa: E501

    The version of the OpenAPI document: 2023-09-15
    Contact: developers@klaviyo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RenderOptionsSubObject(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            shorten_links = schemas.BoolSchema
            add_org_prefix = schemas.BoolSchema
            add_info_link = schemas.BoolSchema
            add_opt_out_language = schemas.BoolSchema
            __annotations__ = {
                "shorten_links": shorten_links,
                "add_org_prefix": add_org_prefix,
                "add_info_link": add_info_link,
                "add_opt_out_language": add_opt_out_language,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shorten_links"]) -> MetaOapg.properties.shorten_links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_org_prefix"]) -> MetaOapg.properties.add_org_prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_info_link"]) -> MetaOapg.properties.add_info_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_opt_out_language"]) -> MetaOapg.properties.add_opt_out_language: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["shorten_links", "add_org_prefix", "add_info_link", "add_opt_out_language", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shorten_links"]) -> typing.Union[MetaOapg.properties.shorten_links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_org_prefix"]) -> typing.Union[MetaOapg.properties.add_org_prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_info_link"]) -> typing.Union[MetaOapg.properties.add_info_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_opt_out_language"]) -> typing.Union[MetaOapg.properties.add_opt_out_language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["shorten_links", "add_org_prefix", "add_info_link", "add_opt_out_language", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        shorten_links: typing.Union[MetaOapg.properties.shorten_links, bool, schemas.Unset] = schemas.unset,
        add_org_prefix: typing.Union[MetaOapg.properties.add_org_prefix, bool, schemas.Unset] = schemas.unset,
        add_info_link: typing.Union[MetaOapg.properties.add_info_link, bool, schemas.Unset] = schemas.unset,
        add_opt_out_language: typing.Union[MetaOapg.properties.add_opt_out_language, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RenderOptionsSubObject':
        return super().__new__(
            cls,
            *_args,
            shorten_links=shorten_links,
            add_org_prefix=add_org_prefix,
            add_info_link=add_info_link,
            add_opt_out_language=add_opt_out_language,
            _configuration=_configuration,
            **kwargs,
        )
