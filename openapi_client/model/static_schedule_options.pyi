# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.  # noqa: E501

    The version of the OpenAPI document: 2023-09-15
    Contact: developers@klaviyo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class StaticScheduleOptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "datetime",
        }
        
        class properties:
            datetime = schemas.DateTimeSchema
            is_local = schemas.BoolSchema
            send_past_recipients_immediately = schemas.BoolSchema
            __annotations__ = {
                "datetime": datetime,
                "is_local": is_local,
                "send_past_recipients_immediately": send_past_recipients_immediately,
            }
    
    datetime: MetaOapg.properties.datetime
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetime"]) -> MetaOapg.properties.datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_local"]) -> MetaOapg.properties.is_local: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["send_past_recipients_immediately"]) -> MetaOapg.properties.send_past_recipients_immediately: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["datetime", "is_local", "send_past_recipients_immediately", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetime"]) -> MetaOapg.properties.datetime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_local"]) -> typing.Union[MetaOapg.properties.is_local, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["send_past_recipients_immediately"]) -> typing.Union[MetaOapg.properties.send_past_recipients_immediately, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["datetime", "is_local", "send_past_recipients_immediately", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        datetime: typing.Union[MetaOapg.properties.datetime, str, datetime, ],
        is_local: typing.Union[MetaOapg.properties.is_local, bool, schemas.Unset] = schemas.unset,
        send_past_recipients_immediately: typing.Union[MetaOapg.properties.send_past_recipients_immediately, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StaticScheduleOptions':
        return super().__new__(
            cls,
            *_args,
            datetime=datetime,
            is_local=is_local,
            send_past_recipients_immediately=send_past_recipients_immediately,
            _configuration=_configuration,
            **kwargs,
        )
